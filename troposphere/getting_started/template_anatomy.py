from troposphere import Template, Parameter, Output, Export, Ref, Equals, Sub
from troposphere import ec2

t = Template()
t.set_version()
t.set_description('Template generated by Troposphere')

t.set_metadata({
    'Comments': 'Initial Draft',
    'LastUpdated': 'Jan 1st 2015',
    'UpdatedBy': 'First Last',
    'Version': 'V1.0',
    'Instances' : {
      'Description' : 'Information about the instances'
    },
    'Databases' : {
      'Description' : 'Information about the databases'
    }
})

p_environment = t.add_parameter(Parameter(
    'Environment',
    Description='Environment into which the EC2 instance will be deployed',
    Type='String'
))

t.add_parameter(Parameter(
    'KeyName',
    Description='Name of an existing EC2 KeyPair to enable SSH '
                'access to the instance',
    Type='String',
))

t.add_mapping('RegionMap', {
    'us-east-1': {'AMI': 'ami-7f418316'},
    'us-west-1': {'AMI': 'ami-951945d0'},
    'us-west-2': {'AMI': 'ami-16fd7026'},
    'eu-west-1': {'AMI': 'ami-24506250'},
    'sa-east-1': {'AMI': 'ami-3e3be423'},
    'ap-southeast-1': {'AMI': 'ami-74dda626'},
    'ap-northeast-1': {'AMI': 'ami-dcfa4edd'}
})

c_is_prod = t.add_condition('IsProduction', Equals(Ref('Environment'), 'true'))
#t.set_transform('AWS::Serverless-2016-10-31')

r_vpc = t.add_resource(ec2.VPC(
    'VPC',
    Condition=c_is_prod,
    CidrBlock='10.0.0.0/24'
))

t.add_output(Output(
  'VPCId',
  Value=Ref(r_vpc),
  Description='VPC Id',
  Export=Export(Sub('${AWS::StackName}-' + r_vpc.title))
))

print(t.to_yaml())
